{"version":3,"sources":["logo.svg","Components/Featurs/FetchData/FetchData.jsx","App.js","reportWebVitals.js","index.js"],"names":["FetchData","useState","city","setCity","cities","setCities","temp","setTemp","resultFilter","setResultFilter","inputRef","useRef","api","cityName","filterCities","keyWord","current","value","array","filter","item","length","name","substring","toLowerCase","useEffect","randomApi","citiesApi","fetch","then","json","res","list","getApi","console","log","className","ref","onChange","type","id","map","key","onClick","main","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAAe,I,2BCgEAA,MA9Df,WACE,MAAuBC,mBAAS,IAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA6BJ,mBAAS,GAAtC,mBACA,GADA,UACuBA,oBAAS,IAAhC,mBAAOK,EAAP,KAAYC,EAAZ,KACA,EAAuCN,mBAAS,IAAhD,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAAuCR,oBAAS,GAAhD,mBAEMS,GAFN,UAEiBC,oBAEXC,EAAG,2DAAuDV,EAAvD,kBADM,oCAITW,EAAWF,mBAejB,SAASG,IACR,IAAMC,EAAUL,EAASM,QAAQC,MACjCd,EAAQO,EAASM,QAAQC,OACzB,IAAMC,EAAQd,EAAOe,QAAO,SAACC,GAC7B,GAAGL,EAAQM,OAAS,EACpB,OAAOD,EAAKE,KAAKC,UAAU,EAAER,EAAQM,QAAQG,gBAAkBT,EAAQS,iBAGtEf,EAAgBS,GAIhB,OAnBFO,qBAAU,kBANV,SAAgBC,EAAUC,GAC1BC,MAAMF,GAAWG,MAAK,SAAA3B,GAAI,OAAIA,EAAK4B,UAAQD,MAAK,SAAAE,GAAG,OAAI5B,EAAQ4B,MAC/DH,MAAMD,GAAWE,MAAK,SAAA3B,GAAI,OAAIA,EAAK4B,UAAQD,MAAK,SAAAE,GAAG,OAAI1B,EAAU0B,EAAIC,SACrElB,IAGgBmB,CAAOrB,EAVL,iHAUoB,IAEtCsB,QAAQC,IAAIjC,GACZgC,QAAQC,IAAI/B,GAiBN,sBAAKgC,UAAU,YAAf,UAEA,uBAAOC,IAAK3B,EAAW4B,SAAU,WAAKxB,KAAkByB,KAAK,OAAOjB,KAAK,GAAGkB,GAAG,KAC/E,yBACC,qBAAKJ,UAAU,iBAAf,SAEG5B,GAAgBA,EAAaiC,KAAI,SAAC1B,EAAQ2B,GAEvC,OAAO,qBAAKN,UAAU,cAAf,UACM,oBAAIC,IAAKxB,EAAU8B,QAAS,kBAAKpC,GAASD,IAA1C,SAA6DS,EAAQO,MAAdoB,GACtDpC,EAAO,uCAAUS,EAAQ6B,KAAKtC,QAAa,yCCxCzDuC,MATf,WACE,OACE,sBAAKT,UAAU,MAAf,UACE,oBAAIA,UAAU,WAAd,oBACD,cAAC,EAAD,QCIUU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.64e6cc5d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React,{useState,useEffect, useRef} from 'react';\r\nimport './FetchData.css';\r\nfunction FetchData() {\r\n  const [city,setCity] = useState(\"\");\r\n  const [cities, setCities] = useState([]);\r\n  const [counter,setCounter] = useState(0);\r\n  const [temp,setTemp] = useState(false);\r\n  const [resultFilter,setResultFilter] = useState([]);\r\n  const [checkWeather,setCheckWeather] = useState(false);\r\n  \r\n  const inputRef = useRef();\r\n  const apiKey = \"64fd34f49cad7e7ef6f22286e7aaf394\"\r\n  const api = `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\r\n  const citiesApi = \"https://api.openweathermap.org/data/2.5/box/city?bbox=12,32,15,37,10&appid=64fd34f49cad7e7ef6f22286e7aaf394\";\r\n\r\n  const cityName = useRef();\r\n\r\n  function getApi(randomApi,citiesApi){\r\n  fetch(randomApi).then(city => city.json()).then(res => setCity(res));\r\n  fetch(citiesApi).then(city => city.json()).then(res => setCities(res.list));\r\n  filterCities()\r\n  }\r\n\r\n  useEffect(() => getApi(api,citiesApi),[])\r\n  \r\n  console.log(city);\r\n  console.log(cities);\r\n\r\n\r\n\r\n  function filterCities(){\r\n   const keyWord = inputRef.current.value;\r\n   setCity(inputRef.current.value)\r\n   const array = cities.filter((item) => {\r\n   if(keyWord.length > 0){\r\n   return item.name.substring(0,keyWord.length).toLowerCase() === keyWord.toLowerCase(); \r\n   }     \r\n })\r\n    setResultFilter(array);\r\n  }\r\n\r\n \r\n    return (\r\n        <div className=\"container\">\r\n          \r\n        <input ref={inputRef}  onChange={()=>{filterCities()}}  type=\"text\" name=\"\" id=\"\" />\r\n        <span></span>\r\n         <div className=\"autoComplition\">\r\n          {\r\n            resultFilter && resultFilter.map((keyWord,key)=> {\r\n                  \r\n               return <ul  className=\"keyWordlist\">\r\n                            <h3 ref={cityName} onClick={()=> setTemp(!temp)}  key={key}>{keyWord.name}</h3>\r\n                            {temp ? <h5>temp:{keyWord.main.temp}</h5> : <></>}\r\n                     </ul> \r\n            }) \r\n          }\r\n\r\n         </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FetchData;","import logo from './logo.svg';\nimport './App.css';\nimport FetchData from './Components/Featurs/FetchData/FetchData';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"headline\">Search</h1>\n     <FetchData />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}